"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[636],{7296:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>_,default:()=>A,frontMatter:()=>R,metadata:()=>P,toc:()=>T});var r=n(4848),i=n(8453),s=n(6540),a=n(4164),l=n(3104),o=n(6347),u=n(205),c=n(7485),d=n(1682),h=n(9466);function p(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return p(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}(n);return function(e){const t=(0,d.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=m(e),[a,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[o,c]=g({queryString:n,groupId:r}),[d,p]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,h.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=o??d;return f({value:e,tabValues:i})?e:null})();(0,u.A)((()=>{b&&l(b)}),[b]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!f({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),p(e)}),[c,p,i]),tabValues:i}}var x=n(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function j(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:o}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=o[n].value;r!==i&&(c(t),s(r))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>u.push(e),onKeyDown:h,onClick:d,...s,className:(0,a.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":i===t}),children:n??t},t)}))})}function S(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function I(e){const t=b(e);return(0,r.jsxs)("div",{className:(0,a.A)("tabs-container",v.tabList),children:[(0,r.jsx)(j,{...e,...t}),(0,r.jsx)(S,{...e,...t})]})}function y(e){const t=(0,x.A)();return(0,r.jsx)(I,{...e,children:p(e.children)},String(t))}const C={tabItem:"tabItem_Ymn6"};function B(e){let{children:t,hidden:n,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(C.tabItem,i),hidden:n,children:t})}const R={slug:"/file-formats/spr",title:"SPR"},_=void 0,P={id:"file-formats/SPR",title:"SPR",description:"This document describes the SPR file format used in the Ragnarok Online client (and Arcturus).",source:"@site/docs/file-formats/SPR.md",sourceDirName:"file-formats",slug:"/file-formats/spr",permalink:"/file-formats/spr",draft:!1,unlisted:!1,editUrl:"https://github.com/RagnarokResearchLab/ragnarokresearchlab.github.io/edit/main/docs/file-formats/SPR.md",tags:[],version:"current",frontMatter:{slug:"/file-formats/spr",title:"SPR"},sidebar:"tutorialSidebar",previous:{title:"RSW",permalink:"/file-formats/rsw"},next:{title:"STR (Placeholder)",permalink:"/file-formats/str"}},w={},T=[{value:"Contents",id:"contents",level:2},{value:"Features",id:"features",level:2},{value:"Bitmap Color Palette",id:"bitmap-color-palette",level:3},{value:"Run-Length Encoding",id:"run-length-encoding",level:3},{value:"Transparency",id:"transparency",level:3},{value:"Layout",id:"layout",level:2},{value:"Versions",id:"versions",level:3},{value:"Fields",id:"fields",level:3},{value:"Signature",id:"signature",level:4},{value:"Version",id:"version",level:4},{value:"BitmapSprites",id:"bitmapsprites",level:4},{value:"BitmapColors",id:"bitmapcolors",level:4},{value:"TrueColorSprites",id:"truecolorsprites",level:4},{value:"CompressedBitmapSprites",id:"compressedbitmapsprites",level:4},{value:"References",id:"references",level:2}];function k(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"This document describes the SPR file format used in the Ragnarok Online client (and Arcturus)."}),"\n",(0,r.jsx)(t.h2,{id:"contents",children:"Contents"}),"\n",(0,r.jsx)(t.p,{children:"SPR files contain the following information:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Sprites, icons, and other graphics rendered by the game (either inside the world or as part of the UI)"}),"\n",(0,r.jsx)(t.li,{children:'Indexed-color bitmaps and their respective color palettes, here called the "BMP segment"'}),"\n",(0,r.jsx)(t.li,{children:'Truecolor images with transparency values for each pixel, here called the "TGA segment"'}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The file contents can be interpreted as a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Texture_atlas",children:"spritesheet"})," and combined with ",(0,r.jsx)(t.a,{href:"/file-formats/act",children:"ACT files"})," to implement animated sprites."]}),"\n",(0,r.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,r.jsx)(t.h3,{id:"bitmap-color-palette",children:"Bitmap Color Palette"}),"\n",(0,r.jsxs)(t.p,{children:["Instead of encoding the RGBA pixels directly, the BMP segment of the file uses a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Palette_(computing)",children:"color palette"})," with up to 256 colors:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"In the image data, each byte corresponds to an entry in this lookup table"}),"\n",(0,r.jsx)(t.li,{children:"Entry 0 is always the (transparent) background color, regardless of its alpha value"}),"\n",(0,r.jsx)(t.li,{children:"Even if present, alpha values are otherwise not supported and should be ignored"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The palette included in the SPR file is the default palette. It's possible to load in ",(0,r.jsx)(t.a,{href:"/file-formats/pal",children:"PAL"})," files to recolor a given sprite."]}),"\n",(0,r.jsx)(t.h3,{id:"run-length-encoding",children:"Run-Length Encoding"}),"\n",(0,r.jsx)(t.p,{children:"Because most sprites include a significant number of (transparent) background pixels, later versions of the format employ a primitive compression scheme to reduce the number of identical palette indices that have to be stored in the BMP segment."}),"\n",(0,r.jsxs)(t.p,{children:["The method is chiefly known as ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Run-length_encoding",children:"RLE"})," because it works by encoding runs (here: of zero bytes, which refer to the palette index 0 - the transparent background color) into a two-byte shorthand: First, a zero-byte that indicates the start of a run, and then the number of encoded zero bytes. Decompression simply requires inserting the same number of zeroes into the output stream."]}),"\n",(0,r.jsx)(t.p,{children:"If that sounds confusing, here's some examples:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["If the image contained five background pixels, you'll see ",(0,r.jsx)(t.code,{children:"00 05"}),', which stands for "emit zero, five times"']}),"\n",(0,r.jsxs)(t.li,{children:["The bytes ",(0,r.jsx)(t.code,{children:'"ABC"'})," (",(0,r.jsx)(t.code,{children:"65 66 67"}),') are "decompressed" to the same sequence as there\'s no encoded run present']}),"\n",(0,r.jsxs)(t.li,{children:["A single zero byte must be encoded as ",(0,r.jsx)(t.code,{children:"00 01"}),' ("emit zero, one time") - meaning that ',(0,r.jsx)(t.code,{children:"00 00"})," is not allowed"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"This feature isn't used for the truecolor (TGA) segments as pixels are stored in ABGR format, in which repetition is less common."}),"\n",(0,r.jsx)(t.h3,{id:"transparency",children:"Transparency"}),"\n",(0,r.jsx)(t.p,{children:"Alpha values in the BMP palette should be completely ignored. RGBA colors are stored raw and not premultiplied."}),"\n",(0,r.jsx)(t.p,{children:'The color with palette index 0 can be considered the "background color". It must be cleared manually on load.'}),"\n",(0,r.jsx)(t.h2,{id:"layout",children:"Layout"}),"\n",(0,r.jsx)(t.h3,{id:"versions",children:"Versions"}),"\n","\n","\n",(0,r.jsxs)(y,{children:[(0,r.jsx)(B,{value:"1.1",label:"Version 1.1",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",metastring:'title="SPR File Format (v1.1)"',children:"struct BitmapSprite {\n    uint16_t ImageWidth;\n    uint16_t ImageHeight;\n    uint8_t PaletteIndices[ImageWidth * ImageHeight];\n};\n\nstruct PaletteColor {\n    uint8_t Red;\n    uint8_t Green;\n    uint8_t Blue;\n    uint8_t Alpha;\n};\n\nstruct RagnarokSPR {\n    char Signature[2];\n    uint8_t VersionMajor;\n    uint8_t VersionMinor;\n    uint16_t BitmapImageCount;\n    struct BitmapSprite BitmapSprites[BitmapImageCount];\n    struct PaletteColor BitmapColors[256];\n};\n"})})}),(0,r.jsx)(B,{value:"2.0",label:"Version 2.0",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",metastring:'title="SPR File Format (v2.0)"',children:"struct BitmapSprite {\n    uint16_t ImageWidth;\n    uint16_t ImageHeight;\n    uint8_t PaletteIndices[ImageWidth * ImageHeight];\n};\n\n// diff-add-start\nstruct TrueColorPixel {\n    uint8_t Alpha;\n    uint8_t Blue;\n    uint8_t Green;\n    uint8_t Red;\n};\n\nstruct TrueColorSprite {\n    uint16_t ImageWidth;\n    uint16_t ImageHeight;\n    struct TrueColorPixel PixelBuffer[ImageWidth * ImageHeight];\n};\n// diff-add-end\n\nstruct PaletteColor {\n    uint8_t Red;\n    uint8_t Green;\n    uint8_t Blue;\n    uint8_t Alpha;\n};\n\nstruct RagnarokSPR {\n    char Signature[2];\n    uint8_t VersionMajor;\n    uint8_t VersionMinor;\n    uint16_t BitmapImageCount;\n    // diff-add\n    uint16_t TrueColorImageCount;\n    struct BitmapSprite BitmapSprites[BitmapImageCount];\n    // diff-add\n    struct TrueColorSprite TrueColorSprites[TrueColorImageCount];\n    struct PaletteColor BitmapColors[256];\n};\n"})})}),(0,r.jsx)(B,{value:"2.1",label:"Version 2.1",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",metastring:'title="SPR File Format (v2.1)"',children:"// diff-remove\nstruct BitmapSprite {\n// diff-add\nstruct CompressedBitmapSprite {\n    uint16_t ImageWidth;\n    uint16_t ImageHeight;\n    // diff-remove\n    uint8_t PaletteIndices[ImageWidth * ImageHeight];\n    // diff-add-start\n    uint16_t CompressedBufferSize;\n    uint8_t CompressedPaletteIndices[CompressedBufferSize];\n    // diff-add-end\n};\n\nstruct TrueColorPixel {\n    uint8_t Alpha;\n    uint8_t Blue;\n    uint8_t Green;\n    uint8_t Red;\n};\n\nstruct TrueColorSprite {\n    uint16_t ImageWidth;\n    uint16_t ImageHeight;\n    struct TrueColorPixel PixelBuffer[ImageWidth * ImageHeight];\n};\n\nstruct PaletteColor {\n    uint8_t Red;\n    uint8_t Green;\n    uint8_t Blue;\n    uint8_t Alpha;\n};\n\nstruct RagnarokSPR {\n    char Signature[2];\n    uint8_t VersionMajor;\n    uint8_t VersionMinor;\n    uint16_t BitmapImageCount;\n    uint16_t TrueColorImageCount;\n    // diff-remove\n    struct BitmapSprite BitmapSprites[BitmapImageCount];\n    // diff-add\n    struct CompressedBitmapSprite CompressedBitmapSprites[BitmapImageCount];\n    struct TrueColorSprite TrueColorSprites[TrueColorImageCount];\n    struct PaletteColor BitmapColors[256];\n};\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"fields",children:"Fields"}),"\n",(0,r.jsx)(t.h4,{id:"signature",children:"Signature"}),"\n",(0,r.jsxs)(t.p,{children:["Uniquely identifies the file format. Must always be ",(0,r.jsx)(t.code,{children:'"SP"'})," (ASCII-encoded, fixed-size string)."]}),"\n",(0,r.jsx)(t.h4,{id:"version",children:"Version"}),"\n",(0,r.jsxs)(t.p,{children:["Signals the presence of optional features. Version ",(0,r.jsx)(t.code,{children:"1.1"})," is used only in ",(0,r.jsx)(t.a,{href:"/arcturus",children:"Arcturus"}),", but not in any known build of the RO client."]}),"\n",(0,r.jsx)(t.h4,{id:"bitmapsprites",children:"BitmapSprites"}),"\n",(0,r.jsx)(t.p,{children:"Indexed-color sprite images (BMP segment). All pixels are stored as palette indices that need to be resolved on load."}),"\n",(0,r.jsxs)(t.p,{children:["A size of ",(0,r.jsx)(t.code,{children:"(-1, -1)"})," indicates an invalid image, which consists of a single blank pixel that can safely be discarded."]}),"\n",(0,r.jsx)(t.h4,{id:"bitmapcolors",children:"BitmapColors"}),"\n",(0,r.jsxs)(t.p,{children:["The BMP color palette, consisting of RGBA pixels. Alpha can be discarded. Equivalent to the file contents of a ",(0,r.jsx)(t.a,{href:"/file-formats/pal",children:"PAL"})," file."]}),"\n",(0,r.jsx)(t.h4,{id:"truecolorsprites",children:"TrueColorSprites"}),"\n",(0,r.jsx)(t.p,{children:"True color sprite images (TGA segment). Pixels are stored raw in order ABGR and they do make use of the alpha channel."}),"\n",(0,r.jsx)(t.h4,{id:"compressedbitmapsprites",children:"CompressedBitmapSprites"}),"\n",(0,r.jsx)(t.p,{children:"Indexed-color sprite images (BMP segment). All pixels are stored as palette indices that need to be resolved on load."}),"\n",(0,r.jsxs)(t.p,{children:["Background pixels are ",(0,r.jsx)(t.a,{href:"#run-length-encoding",children:"RLE"}),"-compressed, so all pixels referring to palette index zero must be decompressed first."]}),"\n",(0,r.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(t.p,{children:"Multiple open-source SPR decoders exist:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/MrAntares/roBrowserLegacy/blob/master/src/Loaders/Sprite.js",children:"GPL-licensed implementation in JavaScript (RoBrowser)"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/vE5li/korangar/blob/main/src/loaders/sprite/mod.rs",children:"MIT-licensed implementation in Rust (Korangar)"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/RagnarokResearchLab/RagLite/blob/main/Core/FileFormats/RagnarokSPR.lua",children:"MPL-licensed implementation in LuaJIT (RagLite SDK)"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["This list only includes actively-maintained versions; ",(0,r.jsx)(t.a,{href:"/community-projects",children:"various other community projects"})," may also be of interest."]})]})}function A(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(k,{...e})}):k(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var r=n(6540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);