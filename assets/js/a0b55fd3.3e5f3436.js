"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6169],{1992:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var i=e(4848),r=e(8453),a=e(1470),o=e(9365);const s={slug:"/file-formats/act",title:"ACT"},l=void 0,u={id:"file-formats/ACT",title:"ACT",description:"This document describes the ACT file format used in the Ragnarok Online client (and Arcturus).",source:"@site/docs/file-formats/ACT.md",sourceDirName:"file-formats",slug:"/file-formats/act",permalink:"/file-formats/act",draft:!1,unlisted:!1,editUrl:"https://github.com/RagnarokResearchLab/ragnarokresearchlab.github.io/edit/main/docs/file-formats/ACT.md",tags:[],version:"current",frontMatter:{slug:"/file-formats/act",title:"ACT"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/file-formats"},next:{title:"EBM",permalink:"/file-formats/ebm"}},c={},d=[{value:"Contents",id:"contents",level:2},{value:"Features",id:"features",level:2},{value:"Sprite Anchors",id:"sprite-anchors",level:3},{value:"Animation Events",id:"animation-events",level:3},{value:"Layout",id:"layout",level:2},{value:"Versions",id:"versions",level:3},{value:"Fields",id:"fields",level:3},{value:"Signature",id:"signature",level:4},{value:"Version",id:"version",level:4},{value:"FrameTimes",id:"frametimes",level:4},{value:"References",id:"references",level:2}];function m(n){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This document describes the ACT file format used in the Ragnarok Online client (and Arcturus)."}),"\n",(0,i.jsx)(t.h2,{id:"contents",children:"Contents"}),"\n",(0,i.jsxs)(t.p,{children:["ACT files store the animation data for ",(0,i.jsx)(t.a,{href:"/rendering/animation-systems#sprite-animations",children:"2D sprites"}),", compiled as a single binary file:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Animation clips for different states of the rendered object (usually character poses)"}),"\n",(0,i.jsx)(t.li,{children:"Markers for special \"events', such as SFX audio playback and triggering the floating combat text"}),"\n",(0,i.jsx)(t.li,{children:"Frame timings to control how long the various animation frames should be displayed"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:'For static images, such as items dropped on the floor, the animation data will usually be just a single "idle" pose.'}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(t.h3,{id:"sprite-anchors",children:"Sprite Anchors"}),"\n",(0,i.jsx)(t.p,{children:"Modern versions of the format support anchor points to implement relative positioning of one sprite in respect to another sprite. This technique is used extensively in the game, e.g., to position the head of player characters relative to the body (and for weapons, shield sprites, and headgears). All sprites are attached to the body only; other anchors seem to be ignored."}),"\n",(0,i.jsx)(t.h3,{id:"animation-events",children:"Animation Events"}),"\n",(0,i.jsx)(t.p,{children:"Each sprite layer may refer to an element of the event list appended at the end of the ACT file. The system allows configuring arbitrary events that should be triggered when the given animation frame is rendered, but only a few types are actually used."}),"\n",(0,i.jsx)(t.p,{children:"Here's the list of all known animation events:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"atk"}),': Start showing the floating combat text for the hit that triggered the "flinch" animation to play']}),"\n",(0,i.jsxs)(t.li,{children:["Any sound file name (event name ending in ",(0,i.jsx)(t.code,{children:".wav"}),"): Start playing the effect, if any audio channels are available"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["It's possible other events may exist in ",(0,i.jsx)(t.a,{href:"/arcturus",children:"Arcturus"})," or legacy builds of the RO client, but more research is needed."]}),"\n",(0,i.jsx)(t.h2,{id:"layout",children:"Layout"}),"\n",(0,i.jsx)(t.h3,{id:"versions",children:"Versions"}),"\n","\n","\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"2.0",label:"Version 2.0",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",metastring:'title="ACT File Format (v2.0)"',children:"struct SpriteLayer {\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t SpritesheetCellIndex;\n    int32_t IsFlippedV;\n    uint8_t ColorTintRed;\n    uint8_t ColorTintGreen;\n    uint8_t ColorTintBlue;\n    uint8_t ColorTintAlpha;\n    float Scale;\n    int32_t RotationDegrees;\n    int32_t ImageTypeID;\n};\n\nstruct AnimationFrame {\n    uint8_t UnusedMysteryBytes[32];\n    uint32_t SpriteLayerCount;\n    struct SpriteLayer SpriteLayers[SpriteLayerCount];\n    int32_t AnimationEventID;\n};\n\nstruct AnimationClip {\n    uint32_t AnimationFrameCount;\n    struct AnimationFrame AnimationFrames[AnimationFrameCount];\n};\n\nstruct RagnarokACT {\n    char Signature[2];\n    uint8_t VersionMinor;\n    uint8_t VersionMajor;\n    uint16_t AnimationClipCount;\n    uint8_t UnusedHeaderField[10];\n    struct AnimationClip AnimationClips[AnimationClipCount];\n};\n"})})}),(0,i.jsx)(o.A,{value:"2.1",label:"Version 2.1",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",metastring:'title="ACT File Format (v2.1)"',children:"struct SpriteLayer {\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t SpritesheetCellIndex;\n    int32_t IsFlippedV;\n    uint8_t ColorTintRed;\n    uint8_t ColorTintGreen;\n    uint8_t ColorTintBlue;\n    uint8_t ColorTintAlpha;\n    float Scale;\n    int32_t RotationDegrees;\n    int32_t ImageTypeID;\n};\n\nstruct AnimationFrame {\n    uint8_t UnusedMysteryBytes[32];\n    uint32_t SpriteLayerCount;\n    struct SpriteLayer SpriteLayers[SpriteLayerCount];\n    int32_t AnimationEventID;\n};\n\nstruct AnimationClip {\n    uint32_t AnimationFrameCount;\n    struct AnimationFrame AnimationFrames[AnimationFrameCount];\n};\n\n// diff-add-start\nstruct AnimationEvent{\n    char Name[40];\n};\n// diff-add-end\n\nstruct RagnarokACT {\n    char Signature[2];\n    uint8_t VersionMinor;\n    uint8_t VersionMajor;\n    uint16_t AnimationClipCount;\n    uint8_t UnusedHeaderField[10];\n    struct AnimationClip AnimationClips[AnimationClipCount];\n\t// diff-add-start\n    int32_t AnimationEventCount;\n    struct AnimationEvent AnimationEvents[AnimationEventCount];\n\t// diff-add-end\n};\n"})})}),(0,i.jsx)(o.A,{value:"2.3",label:"Version 2.3",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",metastring:'title="ACT File Format (v2.3)"',children:"struct SpriteLayer {\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t SpritesheetCellIndex;\n    int32_t IsFlippedV;\n    uint8_t ColorTintRed;\n    uint8_t ColorTintGreen;\n    uint8_t ColorTintBlue;\n    uint8_t ColorTintAlpha;\n    float Scale;\n    int32_t RotationDegrees;\n    int32_t ImageTypeID;\n};\n\n// diff-add-start\nstruct SpriteAnchor{\n    uint8_t UnusedMysteryBytes[4];\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t UnknownFlag;\n};\n// diff-add-end\n\nstruct AnimationFrame {\n    uint8_t UnusedMysteryBytes[32];\n    uint32_t SpriteLayerCount;\n    struct SpriteLayer SpriteLayers[SpriteLayerCount];\n    int32_t AnimationEventID;\n    // diff-add-start\n    int32_t SpriteAnchorCount;\n    struct SpriteAnchor AnchorPoints[SpriteAnchorCount];\n    // diff-add-end\n};\n\nstruct AnimationClip {\n    uint32_t AnimationFrameCount;\n    struct AnimationFrame AnimationFrames[AnimationFrameCount];\n};\n\nstruct AnimationEvent{\n    char Name[40];\n};\n\nstruct RagnarokACT {\n    char Signature[2];\n    uint8_t VersionMinor;\n    uint8_t VersionMajor;\n    uint16_t AnimationClipCount;\n    uint8_t UnusedHeaderField[10];\n    struct AnimationClip AnimationClips[AnimationClipCount];\n    int32_t AnimationEventCount;\n    struct AnimationEvent AnimationEvents[AnimationEventCount];\n\t// diff-add\n    float FrameTimes[AnimationClipCount];\n};\n"})})}),(0,i.jsx)(o.A,{value:"2.4",label:"Version 2.4",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",metastring:'title="ACT File Format (v2.4)"',children:"struct SpriteLayer {\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t SpritesheetCellIndex;\n    int32_t IsFlippedV;\n    uint8_t ColorTintRed;\n    uint8_t ColorTintGreen;\n    uint8_t ColorTintBlue;\n    uint8_t ColorTintAlpha;\n    // diff-remove\n    float Scale;\n    // diff-add-start\n    float ScaleU;\n    float ScaleV;\n    // diff-add-end\n    int32_t RotationDegrees;\n    int32_t ImageTypeID;\n};\n\nstruct SpriteAnchor{\n    uint8_t UnusedMysteryBytes[4];\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t UnknownFlag;\n};\n\nstruct AnimationFrame {\n    uint8_t UnusedMysteryBytes[32];\n    uint32_t SpriteLayerCount;\n    struct SpriteLayer SpriteLayers[SpriteLayerCount];\n    int32_t AnimationEventID;\n    int32_t SpriteAnchorCount;\n    struct SpriteAnchor AnchorPoints[SpriteAnchorCount];\n};\n\nstruct AnimationClip {\n    uint32_t AnimationFrameCount;\n    struct AnimationFrame AnimationFrames[AnimationFrameCount];\n};\n\nstruct AnimationEvent{\n    char Name[40];\n};\n\nstruct RagnarokACT {\n    char Signature[2];\n    uint8_t VersionMinor;\n    uint8_t VersionMajor;\n    uint16_t AnimationClipCount;\n    uint8_t UnusedHeaderField[10];\n    struct AnimationClip AnimationClips[AnimationClipCount];\n    int32_t AnimationEventCount;\n    struct AnimationEvent AnimationEvents[AnimationEventCount];\n    float FrameTimes[AnimationClipCount];\n};\n"})})}),(0,i.jsx)(o.A,{value:"2.5",label:"Version 2.5",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",metastring:'title="ACT File Format (v2.5)"',children:"struct SpriteLayer {\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t SpritesheetCellIndex;\n    int32_t IsFlippedV;\n    uint8_t ColorTintRed;\n    uint8_t ColorTintGreen;\n    uint8_t ColorTintBlue;\n    uint8_t ColorTintAlpha;\n    float Scale;\n    float ScaleU;\n    float ScaleV;\n    int32_t RotationDegrees;\n    int32_t ImageTypeID;\n    // diff-add-start\n    int32_t ImageWidth;\n    int32_t ImageHeight;\n    // diff-add-end\n};\n\nstruct SpriteAnchor{\n    uint8_t UnusedMysteryBytes[4];\n    int32_t PositionU;\n    int32_t PositionV;\n    int32_t UnknownFlag;\n};\n\nstruct AnimationFrame {\n    uint8_t UnusedMysteryBytes[32];\n    uint32_t SpriteLayerCount;\n    struct SpriteLayer SpriteLayers[SpriteLayerCount];\n    int32_t AnimationEventID;\n    int32_t SpriteAnchorCount;\n    struct SpriteAnchor AnchorPoints[SpriteAnchorCount];\n};\n\nstruct AnimationClip {\n    uint32_t AnimationFrameCount;\n    struct AnimationFrame AnimationFrames[AnimationFrameCount];\n};\n\nstruct AnimationEvent{\n    char Name[40];\n};\n\nstruct RagnarokACT {\n    char Signature[2];\n    uint8_t VersionMinor;\n    uint8_t VersionMajor;\n    uint16_t AnimationClipCount;\n    uint8_t UnusedHeaderField[10];\n    struct AnimationClip AnimationClips[AnimationClipCount];\n    int32_t AnimationEventCount;\n    struct AnimationEvent AnimationEvents[AnimationEventCount];\n    float FrameTimes[AnimationClipCount];\n};\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"fields",children:"Fields"}),"\n",(0,i.jsx)(t.h4,{id:"signature",children:"Signature"}),"\n",(0,i.jsxs)(t.p,{children:["Uniquely identifies the file format. Must always be ",(0,i.jsx)(t.code,{children:'"AC"'})," (ASCII-encoded, fixed-size string)."]}),"\n",(0,i.jsx)(t.h4,{id:"version",children:"Version"}),"\n",(0,i.jsx)(t.p,{children:"Signals the presence of optional features. For reasons unknown, the minor and major version bytes are swapped here."}),"\n",(0,i.jsx)(t.h4,{id:"frametimes",children:"FrameTimes"}),"\n",(0,i.jsxs)(t.p,{children:['The times are given in the unit of "ticks per displayed frame". Multiply by ',(0,i.jsx)(t.code,{children:"24"})," to get the time in milliseconds (",(0,i.jsx)(t.a,{href:"/rendering/animation-systems/#act-frame-times",children:"why?"}),")."]}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(t.p,{children:"Multiple open-source ACT decoders exist:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/MrAntares/roBrowserLegacy/blob/master/src/Loaders/Action.js",children:"GPL-licensed implementation in JavaScript (RoBrowser)"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/vE5li/korangar/blob/main/src/loaders/action/mod.rs",children:"MIT-licensed implementation in Rust (Korangar)"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/RagnarokResearchLab/RagLite/blob/main/Core/FileFormats/RagnarokACT.lua",children:"MPL-licensed implementation in LuaJIT (RagLite SDK)"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This list only includes actively-maintained versions; ",(0,i.jsx)(t.a,{href:"/community-projects",children:"various other community projects"})," may also be of interest."]})]})}function h(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},9365:(n,t,e)=>{e.d(t,{A:()=>o});e(6540);var i=e(4164);const r={tabItem:"tabItem_Ymn6"};var a=e(4848);function o(n){let{children:t,hidden:e,className:o}=n;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,o),hidden:e,children:t})}},1470:(n,t,e)=>{e.d(t,{A:()=>b});var i=e(6540),r=e(4164),a=e(3104),o=e(6347),s=e(205),l=e(7485),u=e(1682),c=e(9466);function d(n){return i.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,i.isValidElement)(n)&&function(n){const{props:t}=n;return!!t&&"object"==typeof t&&"value"in t}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(n){const{values:t,children:e}=n;return(0,i.useMemo)((()=>{const n=t??function(n){return d(n).map((n=>{let{props:{value:t,label:e,attributes:i,default:r}}=n;return{value:t,label:e,attributes:i,default:r}}))}(e);return function(n){const t=(0,u.X)(n,((n,t)=>n.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[t,e])}function h(n){let{value:t,tabValues:e}=n;return e.some((n=>n.value===t))}function p(n){let{queryString:t=!1,groupId:e}=n;const r=(0,o.W6)(),a=function(n){let{queryString:t=!1,groupId:e}=n;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:t,groupId:e});return[(0,l.aZ)(a),(0,i.useCallback)((n=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,n),r.replace({...r.location,search:t.toString()})}),[a,r])]}function f(n){const{defaultValue:t,queryString:e=!1,groupId:r}=n,a=m(n),[o,l]=(0,i.useState)((()=>function(n){let{defaultValue:t,tabValues:e}=n;if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${e.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=e.find((n=>n.default))??e[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:a}))),[u,d]=p({queryString:e,groupId:r}),[f,A]=function(n){let{groupId:t}=n;const e=function(n){return n?`docusaurus.tab.${n}`:null}(t),[r,a]=(0,c.Dv)(e);return[r,(0,i.useCallback)((n=>{e&&a.set(n)}),[e,a])]}({groupId:r}),C=(()=>{const n=u??f;return h({value:n,tabValues:a})?n:null})();(0,s.A)((()=>{C&&l(C)}),[C]);return{selectedValue:o,selectValue:(0,i.useCallback)((n=>{if(!h({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);l(n),d(n),A(n)}),[d,A,a]),tabValues:a}}var A=e(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=e(4848);function g(n){let{className:t,block:e,selectedValue:i,selectValue:o,tabValues:s}=n;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),c=n=>{const t=n.currentTarget,e=l.indexOf(t),r=s[e].value;r!==i&&(u(t),o(r))},d=n=>{let t=null;switch(n.key){case"Enter":c(n);break;case"ArrowRight":{const e=l.indexOf(n.currentTarget)+1;t=l[e]??l[0];break}case"ArrowLeft":{const e=l.indexOf(n.currentTarget)-1;t=l[e]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":e},t),children:s.map((n=>{let{value:t,label:e,attributes:a}=n;return(0,v.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:n=>l.push(n),onKeyDown:d,onClick:c,...a,className:(0,r.A)("tabs__item",C.tabItem,a?.className,{"tabs__item--active":i===t}),children:e??t},t)}))})}function y(n){let{lazy:t,children:e,selectedValue:r}=n;const a=(Array.isArray(e)?e:[e]).filter(Boolean);if(t){const n=a.find((n=>n.props.value===r));return n?(0,i.cloneElement)(n,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:a.map(((n,t)=>(0,i.cloneElement)(n,{key:t,hidden:n.props.value!==r})))})}function _(n){const t=f(n);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",C.tabList),children:[(0,v.jsx)(g,{...n,...t}),(0,v.jsx)(y,{...n,...t})]})}function b(n){const t=(0,A.A)();return(0,v.jsx)(_,{...n,children:d(n.children)},String(t))}},8453:(n,t,e)=>{e.d(t,{R:()=>o,x:()=>s});var i=e(6540);const r={},a=i.createContext(r);function o(n){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(a.Provider,{value:t},n.children)}}}]);