"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5312],{7390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=t(4848),o=t(8453);const s={slug:"/tools"},r="Developer Tools",l={type:"mdx",permalink:"/tools",source:"@site/src/pages/tools.md",title:"Developer Tools",description:"This page contains miscellaneous utilities that may be of interest, but don't warrant a dedicated repository.",frontMatter:{slug:"/tools"},unlisted:!1},a={},c=[{value:"EBM Export (with zlib)",id:"ebm-export-with-zlib",level:2},{value:"EUC-KR Path Conversion",id:"euc-kr-path-conversion",level:2},{value:"RagLite Developer Toolkit",id:"raglite-developer-toolkit",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"developer-tools",children:"Developer Tools"}),"\n",(0,i.jsx)(n.p,{children:"This page contains miscellaneous utilities that may be of interest, but don't warrant a dedicated repository."}),"\n",(0,i.jsx)(n.h2,{id:"ebm-export-with-zlib",children:"EBM Export (with zlib)"}),"\n",(0,i.jsxs)(n.p,{children:["Decompressing guild emblems is trivial in any language environment that has bindings to the ",(0,i.jsx)(n.a,{href:"https://www.zlib.net/",children:"zlib"})," API:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"title=decompress-ebm-with-zlib.js",children:'const fs = require("fs");\nconst zlib = require("zlib");\n\nconst EBM_FILE_PATH = "some-guild-emblem.ebm";\n\nconst buffer = fs.readFileSync(EBM_FILE_PATH);\nconst bitmap = zlib.inflateSync(buffer);\n\nfs.writeFileSync(EBM_FILE_PATH + ".bmp", bitmap);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Example: Decompressing EBM files using ",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/zlib.html",children:"Node.js' builtin zlib module"})]})}),"\n",(0,i.jsx)(n.h2,{id:"euc-kr-path-conversion",children:"EUC-KR Path Conversion"}),"\n",(0,i.jsxs)(n.p,{children:["File names have traditionally been stored as ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Extended_Unix_Code",children:"EUC-KR"})," encoded Windows paths inside the ",(0,i.jsx)(n.a,{href:"/file-formats/grf",children:"GRF"})," archive."]}),"\n",(0,i.jsx)(n.p,{children:"If you want to convert them to a more practical Unicode format, you can use the following snippet:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"title=decode-korean-file-names.js",children:'import iconv from "iconv-lite";\nconst { decode: iconv_decode } = iconv;\n\n// Converts the input string from EUC-KR to UTF-8 using iconv-lite\nfunction decodeUnicodeFilePath(input) {\n  const decoded = iconv_decode(Buffer.from(input, "binary"), "EUC-KR");\n\n  // Replace Windows path separators with UNIX style separators (optional)\n  const output = decoded.replace(/\\\\/g, "/");\n\n  // Transparently deal with inconsistent capitalization (for Linux/Mac OS)\n  return output.toLowerCase();\n}\n\nexport { decodeUnicodeFilePath };\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This also standardizes path separators (",(0,i.jsx)(n.code,{children:"\\"})," becomes ",(0,i.jsx)(n.code,{children:"/"}),"). Running the code requires ",(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," with ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/iconv-lite",children:"iconv-lite"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data\\model\\\xbf\xdc\xba\xce\xbc\xd2\xc7\xb0\\\xc6\xae\xb7\xa601.rsm"})," will be converted to ",(0,i.jsx)(n.code,{children:"data/model/\uc678\ubd80\uc18c\ud488/\ud2b8\ub7a901.rsm"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can then paste into ",(0,i.jsx)(n.a,{href:"https://translate.google.com/?sl=auto&tl=en&text=data%2Fmodel%2F%EC%99%B8%EB%B6%80%EC%86%8C%ED%92%88%2F%ED%8A%B8%EB%9E%A901.rsm&op=translate",children:"Google Translate"})," to receive an English file name, or use their API to translate in bulk."]}),"\n",(0,i.jsx)(n.h2,{id:"raglite-developer-toolkit",children:"RagLite Developer Toolkit"}),"\n",(0,i.jsxs)(n.p,{children:["The latest iteration of my toolkit is now freely available on GitHub: ",(0,i.jsx)(n.a,{href:"https://github.com/RagnarokResearchLab/RagLite",children:"RagnarokResearchLab/RagLite"})]}),"\n",(0,i.jsx)(n.p,{children:"While I won't be releasing all of my old tooling, which I expect to become fully obsolete over time, this version is kept continuously in sync with the documentation published on these pages. Here's what it generally aims to do:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Make it easy to analyze RO-specific binary file formats in their many different versions, convert them, etc."}),"\n",(0,i.jsx)(n.li,{children:'Visualize 2D sprites and 3D geometry in a "realistic" (close-enough approximation) ingame environment'}),"\n",(0,i.jsx)(n.li,{children:"Validate hypotheses and verify claims by reimplementing the features in question, where it makes sense"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Please note that this is explicitly ",(0,i.jsx)(n.strong,{children:"NOT"})," a full game client or server implementation. If you want that, there are ",(0,i.jsx)(n.a,{href:"/community-projects",children:"many other projects"})," aiming to accomplish this lofty goal. My focus is on research, and the tool reflects that."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);